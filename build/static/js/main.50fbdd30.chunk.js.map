{"version":3,"sources":["firebase.js","ReadOnlyRow.js","EditableRow.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","storage","ReadOnlyRow","contact","handleEditClick","handleDeleteClick","CompanyName","CompanyWebsite","CompanyPhoneNumber","CompanyAddress","CompanyCity","CompanyState","CompanyCountry","IndustryList","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","name","placeholder","value","onChange","Table","useState","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","editedContact","map","newContact","nanoid","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","username","setUsername","password","setPassword","email","setEmail","open","setOpen","openSignIn","setOpenSignIn","user","setUser","useEffect","unsubscribe","onAuthStateChanged","authUser","console","log","Modal","onClose","style","Input","e","Button","createUserWithEmailAndPassword","then","updateProfile","displayName","catch","error","alert","message","signInWithEmailAndPassword","signOut","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50fbdd30.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n      \r\n    // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\n    apiKey: \"AIzaSyCIJdTZO8kBU10QBAuf3FckhhWDT2MbvKE\",\r\n    authDomain: \"recruitmentapp-1fd3b.firebaseapp.com\",\r\n    projectId: \"recruitmentapp-1fd3b\",\r\n    storageBucket: \"recruitmentapp-1fd3b.appspot.com\",\r\n    messagingSenderId: \"45723745502\",\r\n    appId: \"1:45723745502:web:28a6421f44e932d5c2d64f\",\r\n    measurementId: \"G-Z65T22BCTK\"\r\n  \r\n\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage}\r\n//   export default firebaseConfig;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// to deploy into the firebase do the following :- \r\n// firebase login  (incase of error delete firebase.ps1) \r\n// firebase init \r\n// npm run build \r\n// firebase deploy","import React from 'react'\r\n\r\nfunction ReadOnlyRow({contact , handleEditClick , handleDeleteClick}) {\r\n  return (\r\n \r\n          <tr>\r\n                    <td>{contact.CompanyName}</td>\r\n                    <td>{contact.CompanyWebsite}</td>\r\n                    <td>{contact.CompanyPhoneNumber}</td>\r\n                    <td>{contact.CompanyAddress}</td>\r\n                    <td>{contact.CompanyCity}</td>\r\n                    <td>{contact.CompanyState}</td>\r\n                    <td>{contact.CompanyCountry}</td>\r\n                    <td>{contact.IndustryList}</td>\r\n                    <td>\r\n                    <button type =\"button\" onClick={(event) => handleEditClick (event , contact)}>Edit Company</button>\r\n                    <button type =\"button\" onClick={(event) => handleDeleteClick(event , contact.id)}>Delete Company</button>\r\n                  </td>\r\n         </tr>\r\n   \r\n  )\r\n}\r\n\r\nexport default ReadOnlyRow","import React from 'react'\r\n\r\nfunction EditableRow({editFormData , handleEditFormChange , handleCancelClick}) {\r\n  return (\r\n    <tr>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"CompanyName\" placeholder=\"Company Name\" value={editFormData.CompanyName} onChange={handleEditFormChange}/>\r\n            \r\n        </td>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"CompanyWebsite\" placeholder=\"Company Website\" value ={editFormData.CompanyWebsite}onChange ={handleEditFormChange}/>\r\n        </td>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"CompanyPhoneNumber\" placeholder=\"Company Phone Number\" value={editFormData.CompanyPhoneNumber} onChange ={handleEditFormChange}/>\r\n        </td>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"CompanyAddress\" placeholder=\"Company Address\" value={editFormData.CompanyAddress} onChange ={handleEditFormChange}/>\r\n        </td>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"CompanyCity\" placeholder=\"Company City\" value={editFormData.CompanyCity} onChange ={handleEditFormChange}/>\r\n        </td>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"CompanyState\" placeholder=\"Company State\" value={editFormData.CompanyState} onChange ={handleEditFormChange}/>\r\n        </td>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"CompanyCountry\" placeholder=\"Company Country\" value={editFormData.CompanyCountry} onChange ={handleEditFormChange}/>\r\n        </td>\r\n        <td>\r\n            <input type=\"text\" required =\"required\" name=\"IndustryList\" placeholder=\"Industry List\" value={editFormData.IndustryList} onChange ={handleEditFormChange}/>\r\n        </td>\r\n        <td>\r\n            <button type=\"submit\">Save Company</button>\r\n            <button type=\"button\" onClick={handleCancelClick}>Cancel</button>\r\n        </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default EditableRow","import React, {Fragment, useState} from 'react'\r\nimport \"./Table.css\"\r\nimport data from \"./mock-data.json\"\r\nimport {nanoid} from 'nanoid'\r\nimport ReadOnlyRow from './ReadOnlyRow';\r\nimport EditableRow from './EditableRow';\r\n\r\nfunction Table() {\r\n    const [contacts , setContacts] = useState(data);\r\n    const [addFormData , setAddFormData] = useState({\r\n      CompanyName: \"\",\r\n      CompanyWebsite: \"\",      \r\n      CompanyPhoneNumber: \"\",\r\n      CompanyAddress: \"\",\r\n      CompanyCity: \"\",\r\n      CompanyState: \"\",\r\n      CompanyCountry: \"\",\r\n      IndustryList: \"\",\r\n    });\r\n\r\n    const [editFormData , setEditFormData] = useState({\r\n        CompanyName: \"\",\r\n        CompanyWebsite: \"\",      \r\n        CompanyPhoneNumber: \"\",\r\n        CompanyAddress: \"\",\r\n        CompanyCity: \"\",\r\n        CompanyState: \"\",\r\n        CompanyCountry: \"\",\r\n        IndustryList: \"\",\r\n    });\r\n\r\n     const [editContactId, setEditContactId] = useState(null);\r\n\r\n    const handleAddFormChange =(event) =>{\r\n        event.preventDefault();\r\n\r\n        const fieldName = event.target.getAttribute(\"name\");\r\n        const fieldValue = event.target.value;\r\n\r\n        const newFormData = {...addFormData};\r\n        newFormData[fieldName] = fieldValue;\r\n        setAddFormData(newFormData);\r\n    };\r\n\r\n      const handleEditFormChange =(event) =>{\r\n        event.preventDefault();\r\n        const fieldName = event.target.getAttribute(\"name\");\r\n        const fieldValue = event.target.value;\r\n        const newFormData = {...editFormData};\r\n        newFormData[fieldName] = fieldValue;\r\n        setEditFormData(newFormData);\r\n    };\r\n\r\n    const handleAddFormSubmit = (event) =>{\r\n    event.preventDefault();\r\n      const newContact ={\r\n          id: nanoid(),\r\n        CompanyName: addFormData.CompanyName,\r\n        CompanyWebsite: addFormData.CompanyWebsite,\r\n        CompanyPhoneNumber: addFormData.CompanyPhoneNumber,\r\n        CompanyAddress: addFormData.CompanyAddress,\r\n        CompanyCity: addFormData.CompanyCity,\r\n        CompanyState: addFormData.CompanyState,\r\n        CompanyCountry: addFormData.CompanyCountry,\r\n        IndustryList: addFormData.IndustryList,\r\n\r\n      };\r\n      const newContacts =[...contacts, newContact];\r\n        setContacts(newContacts);\r\n    };\r\n       \r\n\r\n\r\n\r\n    const handleEditFormSubmit = (event) =>{\r\n        event.preventDefault();\r\n\r\n        const editedContact ={\r\n            id: editContactId,\r\n           CompanyName: editFormData.CompanyName,\r\n           CompanyWebsite: editFormData.CompanyWebsite,\r\n           CompanyPhoneNumber: editFormData.CompanyPhoneNumber,\r\n           CompanyAddress: editFormData.CompanyAddress,\r\n           CompanyCity: editFormData.CompanyCity,\r\n           CompanyState: editFormData.CompanyState,\r\n           CompanyCountry: editFormData.CompanyCountry,\r\n           IndustryList: editFormData.IndustryList,\r\n           };\r\n           const newContacts =[...contacts];\r\n              const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n                newContacts[index] = editedContact;\r\n                setContacts(newContacts);\r\n                setEditContactId(null);\r\n    };\r\n\r\n    const handleEditClick =(event, contact) =>{\r\n        event.preventDefault();\r\n        setEditContactId(contact.id);\r\n\r\n        const formValues ={\r\n            CompanyName: contact.CompanyName,\r\n            CompanyWebsite: contact.CompanyWebsite,\r\n            CompanyPhoneNumber: contact.CompanyPhoneNumber,\r\n            CompanyAddress: contact.CompanyAddress,\r\n            CompanyCity: contact.CompanyCity,\r\n            CompanyState: contact.CompanyState,\r\n            CompanyCountry: contact.CompanyCountry,\r\n            IndustryList: contact.IndustryList,\r\n        };\r\n        setEditFormData(formValues);\r\n    };\r\n    const handleCancelClick=() => {\r\n        setEditContactId(null);\r\n    };\r\n     const handleDeleteClick =(event, contactId) =>{\r\n         const newContacts = [...contacts];\r\n         const index = contacts.findIndex((contact) => contact.id === contactId);\r\n         newContacts.splice(index, 1);\r\n            setContacts(newContacts);\r\n     }\r\n  return (\r\n    <div className=\"app-container\">\r\n      <form onSubmit={handleEditFormSubmit}>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Company Name</th>\r\n                    <th>Company Website</th>\r\n                    <th>Company Phone Number</th>\r\n                    <th>Company Address</th>\r\n                    <th>Company City</th>\r\n                    <th>Company State</th>\r\n                    <th>Company Country</th>\r\n                    <th>Industry List</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {contacts.map((contact) => (\r\n                <Fragment>\r\n               {editContactId === contact.id ? ( \r\n                <EditableRow editFormData={editFormData} handleEditFormChange ={handleEditFormChange} handleCancelClick={handleCancelClick}/>\r\n                ) : ( \r\n                    <ReadOnlyRow contact={contact}\r\n                        handleEditClick = {handleEditClick}\r\n                        handleDeleteClick = {handleDeleteClick}\r\n                    />\r\n               )}\r\n               \r\n             \r\n              </Fragment>\r\n            ))}\r\n               \r\n           </tbody>\r\n        </table>\r\n        </form>\r\n        <h2>ADD Company</h2>\r\n        <form onSubmit={handleAddFormSubmit}>\r\n            <input type=\"text\" name=\"CompanyName\" required=\"required\" placeholder=\"Company Name...\" onChange={handleAddFormChange}/>\r\n            <input type=\"text\" name=\"CompanyWebsite\" required=\"required\" placeholder=\"Company Website...\" onChange={handleAddFormChange}/>\r\n            <input type=\"number\" name=\"CompanyPhoneNumber\" required=\"required\" placeholder=\"Company Phone Number...\" onChange={handleAddFormChange}/>\r\n            <input type=\"address\" name=\"CompanyAddress\" required=\"required\" placeholder=\"Company Address...\" onChange={handleAddFormChange}/>\r\n            <input type=\"text\" name=\"CompanyCity\" required=\"required\" placeholder=\"Company City...\" onChange={handleAddFormChange}/>\r\n            <input type=\"text\" name=\"CompanyState\" required=\"required\" placeholder=\"Company State...\" onChange={handleAddFormChange}/>\r\n            <input type=\"text\" name=\"CompanyCountry\" required=\"required\" placeholder=\"Company Country...\" onChange={handleAddFormChange}/>\r\n            <input type=\"text\" name=\"IndustryList\" required=\"required\" placeholder=\"Industry List...\" onChange={handleAddFormChange}/>\r\n            <button type=\"submit\">Add Company</button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Table","import React, { useState , useEffect} from 'react';\nimport './App.css';\nimport {auth} from './firebase';\nimport Modal from '@material-ui/core/Modal';\nimport {makeStyles} from '@material-ui/core/styles';\nimport { Button , Input } from '@material-ui/core';\nimport Table from './Table';\n\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50; \n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\nfunction App() {\n  // props function is used here. \n   const classes = useStyles();\n   const[modalStyle] = useState(getModalStyle);\n   \n  \n  const [username , setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  // here hook is used for the function. \n  //hook is very powerful command function which uses the state function. \n  const [open, setOpen] = useState(false); \n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [user, setUser] = useState(null);\n\n\n  useEffect(() => {\n     const unsubscribe = auth.onAuthStateChanged((authUser) => {\n       if (authUser) {\n          // when user logged in \n          console.log(authUser);\n          setUser(authUser);\n       }\n       else {\n        //  when user is logged out \n            setUser(null);\n       }\n     })\n\n     return () => {\n        // unnecessary id creation\n        // catch the listener so that it can not have duplicate        \n         unsubscribe();\n     }\n  }, [user, username] );\n\n\n\n  // useEffect refresh the page of any particular block \n  \n  \n   const signUp = (event) => {\n       event.preventDefault();\n\n\n       auth\n       .createUserWithEmailAndPassword(email , password)\n       .then((authUser) => {\n        return authUser.user.updateProfile({\n           displayName: username,\n         })\n       })\n       .catch((error) => alert(error.message))\n      //  shows up error message while sign up\n   }\n\n   const signIn = (event) => {\n     event.preventDefault();\n    //  its does not refresh the sign in option \n\n    auth\n    .signInWithEmailAndPassword(email , password)\n    .catch((error) => alert(error.message))\n    \n    setOpenSignIn(false)\n   }\n\n    return (\n    <div className=\"app\">\n      \n      <Modal\n        //  the source code is from modal from the material ui.  as it uses the popup to enter the user's email id and password.\n           open={open}\n           onClose={() => setOpen(false)}>\n\n           <div style={modalStyle} className={classes.paper}>\n           \n            <form className=\"app__signup\">\n            <center>\n       <h1>Create an Account</h1>\n     </center>\n          <Input\n          placeholder=\"username\"\n          type=\"text\"\n          value ={username}\n          onChange={(e) => setUsername(e.target.value)}\n          />\n        <Input\n          placeholder=\"email\"\n          type=\"text\"\n          value ={email}\n          onChange={(e) => setEmail(e.target.value)}\n          />\n          <Input\n          placeholder=\"password\"\n          type=\"password\"\n          value ={password}\n          onChange={(e) => setPassword(e.target.value)}\n          />\n          <Button type=\"submit\" onClick = {signUp}>Sign Up</Button>\n            </form>\n      \n \n    </div>\n</Modal>\n\n      <Modal\n        //  the source code is from modal form the material ui.  as it uses the popup to enter the user's email id and password.\n           open={openSignIn}\n           onClose={() => setOpenSignIn(false)}>\n\n           <div style={modalStyle} className={classes.paper}>\n            {/* popup for the signup is made here */}\n            <form className=\"app__signup\">\n            <center>\n            <h1>Sign In</h1>\n     </center>\n          \n        <Input\n          placeholder=\"email\"\n          type=\"text\"\n          value ={email}\n          onChange={(e) => setEmail(e.target.value)}\n          />\n          <Input\n          placeholder=\"password\"\n          type=\"password\"\n          value ={password}\n          onChange={(e) => setPassword(e.target.value)}\n          />\n          <Button type=\"submit\" onClick = {signIn}>Sign In</Button>\n            </form>\n      \n \n    </div>\n</Modal>\n\n     <div className=\"app__header\">\n     <h1>Recruitment App</h1>\n\n      {user ? (\n        <Button onClick = {() => auth.signOut()}>Logout</Button>\n      ): (\n        <div className=\"app__loginContainer\">\n        <Button onClick = {() => setOpenSignIn(true)}>Sign In</Button>\n        <Button onClick = {() => setOpen(true)}>Sign Up</Button>\n        </div>\n      )}\n    </div>\n           \n       {user?.displayName ? (\n         <>\n              <h1 className =\"login\">Welcome {user.displayName} !!</h1>\n              <Table />\n         </>\n          ): (\n            <h1 className =\"login\">You Need to Login or Signup to Continue</h1>\n          )}\n         \n    \n    </div>\n\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}